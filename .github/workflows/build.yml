name: Setup SCCache

on:
  workflow_dispatch:

jobs:
  setup-sccache:
    strategy:
      matrix:
        os:
          - runs-on: windows-latest
            arch: amd64
          - runs-on: windows-latest
            arch: aarch64
          - runs-on: ubuntu-latest
            arch: amd64
          - runs-on: ubuntu-latest
            arch: aarch64
          - runs-on: macos-latest
            arch: amd64
          - runs-on: macos-latest
            arch: aarch64

    runs-on: ${{ matrix.os.runs-on }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SCCache (Mozilla Action)
        uses: mozilla/sccache-action@v0.0.9
        continue-on-error: true

      - name: Download custom SCCache artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT: a888c16ff2be03c9e7e99f8431186985587cf5b2
          RUN_ID: 18143591494
          SCCACHE_PATH: ${{ env.SCCACHE_PATH }}
        run: |
          echo "Downloading custom SCCache artifact to overwrite the official one..."

          # Detect architecture
          case "${{ matrix.os.arch }}" in
            amd64|x86_64) ARCH_ID="x86_64" ;;
            aarch64|arm64) ARCH_ID="aarch64" ;;
            armv7) ARCH_ID="armv7" ;;
            i686) ARCH_ID="i686" ;;
            s390x) ARCH_ID="s390x" ;;
            *) ARCH_ID="${{ matrix.os.arch }}" ;;
          esac

          # Detect OS
          case "${{ runner.os }}" in
            Linux) OS_ID="unknown-linux-musl" ;;
            macOS) OS_ID="apple-darwin" ;;
            Windows) OS_ID="pc-windows-msvc" ;;
          esac

          ARTIFACT_NAME="sccache-$COMMIT-$ARCH_ID-$OS_ID"
          echo "Looking for artifact: $ARTIFACT_NAME"

          ARTIFACT_URL=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/mozilla/sccache/actions/runs/$RUN_ID/artifacts" \
            | jq -r --arg NAME "$ARTIFACT_NAME" '.artifacts[] | select(.name==$NAME) | .archive_download_url')

          if [[ -z "$ARTIFACT_URL" ]]; then
            echo "Artifact not found!"
            exit 1
          fi

          echo "Downloading $ARTIFACT_URL ..."
          curl -L -H "Authorization: Bearer $GITHUB_TOKEN" -o sccache.zip "$ARTIFACT_URL"
          unzip -o sccache.zip -d sccache-bin
        shell: bash

      - name: Install custom SCCache
        run: |
          # Define SCCACHE_PATH se n√£o estiver definido
          if [[ -z "$SCCACHE_PATH" ]]; then
            SCCACHE_PATH="$HOME/.local/bin/sccache"
            mkdir -p "$(dirname "$SCCACHE_PATH")"
          fi

          echo "Installing custom SCCache to $SCCACHE_PATH..."
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            powershell -Command "Move-Item -Force 'sccache-bin\\sccache.exe' '$env:SCCACHE_PATH'"
          else
            mv sccache-bin/sccache "$SCCACHE_PATH"
            chmod +x "$SCCACHE_PATH"
          fi
        shell: bash

      - name: Verify SCCache version
        run: |
          echo "SCCache version:"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            powershell -Command "& $env:SCCACHE_PATH --version"
          else
            "$SCCACHE_PATH" --version
          fi
        shell: bash
