name: Setup SCCache

on:
  workflow_dispatch:

jobs:
  setup-sccache:
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64
          # - os: macos-15-large
          #   arch: x86_64
          # - os: macos-15-xlarge
          #   arch: aarch64
          - os: windows-2025
            arch: x86_64
          - os: windows-11-arm
            arch: aarch64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SCCache (Mozilla Action)
        # Install the official SCCache via Mozilla GitHub Action
        uses: Caio99BR/sccache-action-arm64@0.0.11
        continue-on-error: true

      - name: Download custom SCCache artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT: a888c16ff2be03c9e7e99f8431186985587cf5b2
          RUN_ID: 18143591494
          SCCACHE_PATH: ${{ env.SCCACHE_PATH }}
        run: |
          # Download the custom SCCache build from the specified run
          echo "Downloading custom SCCache artifact..."
          
          ARCH_ID="${{ matrix.arch }}"

          # Detect OS type for artifact naming
          case "${{ runner.os }}" in
            Linux) OS_ID="unknown-linux-musl" ;;
            macOS) OS_ID="apple-darwin" ;;
            Windows) OS_ID="pc-windows-msvc" ;;
          esac

          ARTIFACT_NAME="sccache-$COMMIT-$ARCH_ID-$OS_ID"
          echo "Looking for artifact: $ARTIFACT_NAME"

          ARTIFACT_URL=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/mozilla/sccache/actions/runs/$RUN_ID/artifacts" \
            | jq -r --arg NAME "$ARTIFACT_NAME" '.artifacts[] | select(.name==$NAME) | .archive_download_url')

          if [[ -z "$ARTIFACT_URL" ]]; then
            echo "Artifact not found!"
            exit 1
          fi

          echo "Downloading $ARTIFACT_URL ..."
          curl -L -H "Authorization: Bearer $GITHUB_TOKEN" -o sccache.zip "$ARTIFACT_URL"
          unzip -o sccache.zip -d sccache-bin
        shell: bash

      - name: Install custom SCCache
        run: |
          # Fallback: set SCCACHE_PATH if not already defined
          if [[ -z "$SCCACHE_PATH" ]]; then
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              SCCACHE_PATH="/c/hostedtoolcache/windows/sccache/custom/sccache.exe"
              mkdir -p "$(dirname "$SCCACHE_PATH")"
            else
              SCCACHE_PATH="$HOME/.local/bin/sccache"
              mkdir -p "$(dirname "$SCCACHE_PATH")"
            fi
          fi

          # Confirm installation path
          echo "Installing custom SCCache to $SCCACHE_PATH..."

          # Verify the binary exists before moving
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            if [[ ! -f "sccache-bin/sccache.exe" ]]; then
              echo "Error: sccache binary not found!"
              exit 1
            fi
            rm -f "$SCCACHE_PATH" # Remove old version if exists
            mv "sccache-bin/sccache.exe" "$SCCACHE_PATH"
          else
            if [[ ! -f "sccache-bin/sccache" ]]; then
              echo "Error: sccache binary not found!"
              exit 1
            fi
            rm -f "$SCCACHE_PATH" # Remove old version if exists
            mv "sccache-bin/sccache" "$SCCACHE_PATH"
            chmod +x "$SCCACHE_PATH" # Ensure executable permissions
          fi

          echo "SCCache installed at $SCCACHE_PATH"
        shell: bash

      - name: Verify SCCache version
        run: |
          # Print SCCache version to verify installation worked
          echo "SCCache version:"
          "$SCCACHE_PATH" --version
        shell: bash
